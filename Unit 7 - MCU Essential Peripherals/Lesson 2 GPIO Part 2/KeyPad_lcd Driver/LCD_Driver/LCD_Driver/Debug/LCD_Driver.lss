
LCD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000180  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094b  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000697  00000000  00000000  00000c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000409  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d2  00000000  00000000  00001b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001e21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  7a:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_kick>:
	
	

}
void lcd_kick(void){
	lcd_control_port |= (1<<EN);
  82:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	83 ed       	ldi	r24, 0xD3	; 211
  86:	90 e3       	ldi	r25, 0x30	; 48
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <lcd_kick+0x6>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <lcd_kick+0xc>
  8e:	00 00       	nop
	_delay_ms(50);
	lcd_control_port &=~ (1<<EN);
  90:	c3 98       	cbi	0x18, 3	; 24
  92:	08 95       	ret

00000094 <lcd_check_isbusy>:
}

void lcd_check_isbusy(){
	Dir_lcd_port &=~ (0xff<<DATA_shift);
  94:	8a b3       	in	r24, 0x1a	; 26
  96:	1a ba       	out	0x1a, r1	; 26
	lcd_control_port &=~ (1<<RS);
  98:	c1 98       	cbi	0x18, 1	; 24
	lcd_control_port |= (1<<RW); //to read
  9a:	c2 9a       	sbi	0x18, 2	; 24
	lcd_kick();
  9c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_kick>
	lcd_control_port &=~ (1<<RW);
  a0:	c2 98       	cbi	0x18, 2	; 24
	Dir_lcd_port |= (0xff<<DATA_shift);
  a2:	8a b3       	in	r24, 0x1a	; 26
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret

000000aa <lcd_send_command>:
}




void lcd_send_command(unsigned char command){
  aa:	cf 93       	push	r28
  ac:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	lcd_check_isbusy();
  ae:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_check_isbusy>
	lcd_port = command;
  b2:	cb bb       	out	0x1b, r28	; 27
	lcd_control_port &= ~( (1<<RS) | (1<<RW) | (1<<EN) );
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	81 7f       	andi	r24, 0xF1	; 241
  b8:	88 bb       	out	0x18, r24	; 24
	lcd_kick();
  ba:	0e 94 41 00 	call	0x82	; 0x82 <lcd_kick>

	//#ifdef FOUR_BIT_MODE
	//#endif
	
	
}
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <lcd_send_character>:

void lcd_send_character(unsigned char character){
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	
	#ifdef EIGHT_BIT_MODE
	lcd_check_isbusy();
  c6:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_check_isbusy>
	lcd_control_port |= (1<<RS);
  ca:	c1 9a       	sbi	0x18, 1	; 24
	lcd_control_port &=~ (1<<RW);
  cc:	c2 98       	cbi	0x18, 2	; 24
	lcd_port = character;
  ce:	cb bb       	out	0x1b, r28	; 27
	lcd_kick();
  d0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_kick>
	#endif
	
	#ifdef FOUR_BIT_MODE
	#endif
}
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <lcd_send_string>:

void lcd_send_string(unsigned char* string){
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	d8 2f       	mov	r29, r24
  e2:	c9 2f       	mov	r28, r25
	
	#ifdef EIGHT_BIT_MODE
	lcd_check_isbusy();
  e4:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_check_isbusy>
	lcd_control_port |= (1<<RS);
  e8:	c1 9a       	sbi	0x18, 1	; 24
	lcd_control_port &=~( (1<<RW) | (1<<EN) );
  ea:	88 b3       	in	r24, 0x18	; 24
  ec:	83 7f       	andi	r24, 0xF3	; 243
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	0d 2f       	mov	r16, r29
  f2:	1c 2f       	mov	r17, r28
	int i=0;
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	d0 e0       	ldi	r29, 0x00	; 0
	while(*string > 0){
  f8:	09 c0       	rjmp	.+18     	; 0x10c <lcd_send_string+0x34>
		lcd_send_character(*string++);
  fa:	0e 94 61 00 	call	0xc2	; 0xc2 <lcd_send_character>
		i++;
  fe:	21 96       	adiw	r28, 0x01	; 1
		if(i == 16)
 100:	c0 31       	cpi	r28, 0x10	; 16
 102:	d1 05       	cpc	r29, r1
 104:	19 f4       	brne	.+6      	; 0x10c <lcd_send_string+0x34>
		lcd_send_command(LCD_BEGIN_AT_FIRST_ROW + position);
	}
	if (line == 2)
	{
		if(position >= 0 && position < 16)
		lcd_send_command(LCD_BEGIN_AT_SECOND_ROW + position);
 106:	80 ec       	ldi	r24, 0xC0	; 192
 108:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_send_command>
	#ifdef EIGHT_BIT_MODE
	lcd_check_isbusy();
	lcd_control_port |= (1<<RS);
	lcd_control_port &=~( (1<<RW) | (1<<EN) );
	int i=0;
	while(*string > 0){
 10c:	f8 01       	movw	r30, r16
 10e:	81 91       	ld	r24, Z+
 110:	8f 01       	movw	r16, r30
 112:	81 11       	cpse	r24, r1
 114:	f2 cf       	rjmp	.-28     	; 0xfa <lcd_send_string+0x22>
	#endif
	
	#ifdef FOUR_BIT_MODE
	#endif
	
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <lcd_Clear_Screen>:


void lcd_Clear_Screen(){
	lcd_send_command(LCD_CLEAR_SCREEN);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_send_command>
 126:	08 95       	ret

00000128 <lcd_init>:
 128:	87 e8       	ldi	r24, 0x87	; 135
 12a:	93 e1       	ldi	r25, 0x13	; 19
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_init+0x4>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_init+0xa>
 132:	00 00       	nop
#include "LCD.h"


void lcd_init(){
	_delay_ms(20);
	Dir_lcd_port = 0xFF;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8a bb       	out	0x1a, r24	; 26
	Dir_lcd_control_port |= ( (1<<RS) | (1<<RW) | (1<<EN) );
 138:	87 b3       	in	r24, 0x17	; 23
 13a:	8e 60       	ori	r24, 0x0E	; 14
 13c:	87 bb       	out	0x17, r24	; 23
	lcd_control_port &= ~( (1<<RS) | (1<<RW) | (1<<EN) );
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	81 7f       	andi	r24, 0xF1	; 241
 142:	88 bb       	out	0x18, r24	; 24
 144:	85 ea       	ldi	r24, 0xA5	; 165
 146:	9e e0       	ldi	r25, 0x0E	; 14
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_init+0x20>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_init+0x26>
 14e:	00 00       	nop
	_delay_ms(15); //finish initialization
	lcd_Clear_Screen();
 150:	0e 94 90 00 	call	0x120	; 0x120 <lcd_Clear_Screen>
	

	#ifdef EIGHT_BIT_MODE
	lcd_send_command(LCD_FUNCTION_8BIT_2LINES);
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_send_command>
	#endif
	
	#ifdef FOUR_BIT_MODE
	#endif
	
	lcd_send_command(LCD_ENTRY_MODE);
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_send_command>
	lcd_send_command(LCD_BEGIN_AT_FIRST_ROW);
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_send_command>
	lcd_send_command(LCD_DISP_ON_CURSOR_BLINK);
 166:	8f e0       	ldi	r24, 0x0F	; 15
 168:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_send_command>
 16c:	08 95       	ret

0000016e <main>:
 */
#include "LCD.h"

int main(void)
{
lcd_init();
 16e:	0e 94 94 00 	call	0x128	; 0x128 <lcd_init>

lcd_send_string("Ali Mustafa enaya");
 172:	80 e6       	ldi	r24, 0x60	; 96
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_send_string>
 17a:	ff cf       	rjmp	.-2      	; 0x17a <main+0xc>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
