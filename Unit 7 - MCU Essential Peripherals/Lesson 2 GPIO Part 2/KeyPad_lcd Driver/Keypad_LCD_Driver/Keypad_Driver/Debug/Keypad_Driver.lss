
Keypad_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000003ce  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc7  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007dd  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000710  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f6  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000045e  00000000  00000000  0000253e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000299c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b9 01 	call	0x372	; 0x372 <main>
  7a:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_init>:
uint8_t keypad_Rows[] = {R0 ,R1 ,R2 ,R3};
uint8_t keypad_Col[]  = {C0 ,C1 ,C2 ,C3};

void keypad_init(){
	//make R0->R3 input
	keypadDDR &=~( (1<<R0) | (1<<R1) | (1<<R2) | (1<<R3) );	
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	//make C0->c3 Output and vcc
	keypadDDR |=  (1<<C0) | (1<<C1) | (1<<C2) | (1<<C3) ;
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
	keypadPORT = 0xFF; //to write on keypad_Col 1 and make raws pullup
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <keypad_get_key>:
	
}

char keypad_get_key(){
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	0f 2e       	mov	r0, r31
  a2:	f0 e6       	ldi	r31, 0x60	; 96
  a4:	ef 2e       	mov	r14, r31
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	ff 2e       	mov	r15, r31
  aa:	f0 2d       	mov	r31, r0
	int i,j;
	for ( i=0;i<4 ;i++)
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b0 e0       	ldi	r27, 0x00	; 0
	{
		keypadPORT |=  (1<<keypad_Col[0]) | (1<<keypad_Col[1]) | (1<<keypad_Col[2]) | (1<<keypad_Col[3]) ; //to make sure all columns is Vcc
  b0:	f7 01       	movw	r30, r14
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	92 b3       	in	r25, 0x12	; 18
  b8:	ba 01       	movw	r22, r20
  ba:	00 80       	ld	r0, Z
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <keypad_get_key+0x2e>
  be:	66 0f       	add	r22, r22
  c0:	77 1f       	adc	r23, r23
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <keypad_get_key+0x2a>
  c6:	9a 01       	movw	r18, r20
  c8:	01 80       	ldd	r0, Z+1	; 0x01
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <keypad_get_key+0x3c>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	0a 94       	dec	r0
  d2:	e2 f7       	brpl	.-8      	; 0xcc <keypad_get_key+0x38>
  d4:	26 2b       	or	r18, r22
  d6:	82 2f       	mov	r24, r18
  d8:	89 2b       	or	r24, r25
  da:	9a 01       	movw	r18, r20
  dc:	02 80       	ldd	r0, Z+2	; 0x02
  de:	02 c0       	rjmp	.+4      	; 0xe4 <keypad_get_key+0x50>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <keypad_get_key+0x4c>
  e8:	28 2b       	or	r18, r24
  ea:	ca 01       	movw	r24, r20
  ec:	03 80       	ldd	r0, Z+3	; 0x03
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <keypad_get_key+0x60>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <keypad_get_key+0x5c>
  f8:	82 2b       	or	r24, r18
  fa:	82 bb       	out	0x12, r24	; 18
		//_delay_ms(2000);
		keypadPORT &=~ (1 << keypad_Col[i]);// to send 0 to specific column
  fc:	92 b3       	in	r25, 0x12	; 18
  fe:	e7 01       	movw	r28, r14
 100:	9a 01       	movw	r18, r20
 102:	09 90       	ld	r0, Y+
 104:	02 c0       	rjmp	.+4      	; 0x10a <keypad_get_key+0x76>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <keypad_get_key+0x72>
 10e:	7e 01       	movw	r14, r28
 110:	82 2f       	mov	r24, r18
 112:	80 95       	com	r24
 114:	89 23       	and	r24, r25
 116:	82 bb       	out	0x12, r24	; 18
 118:	c4 e6       	ldi	r28, 0x64	; 100
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	00 e0       	ldi	r16, 0x00	; 0
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <keypad_get_key+0x96>
 126:	0f 5f       	subi	r16, 0xFF	; 255
 128:	1f 4f       	sbci	r17, 0xFF	; 255
	
		for ( j=0 ; j<4 ;j++)
		{
			if (!(keypadPIN & (1<<keypad_Rows[j]))) //keypad_Rows[j] using for masking
 12a:	80 b3       	in	r24, 0x10	; 16
 12c:	29 91       	ld	r18, Y+
 12e:	6f 5f       	subi	r22, 0xFF	; 255
 130:	7f 4f       	sbci	r23, 0xFF	; 255
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 2e       	mov	r0, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <keypad_get_key+0xa8>
 138:	95 95       	asr	r25
 13a:	87 95       	ror	r24
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <keypad_get_key+0xa4>
 140:	80 fd       	sbrc	r24, 0
 142:	4f c0       	rjmp	.+158    	; 0x1e2 <keypad_get_key+0x14e>
 144:	ca 01       	movw	r24, r20
 146:	02 c0       	rjmp	.+4      	; 0x14c <keypad_get_key+0xb8>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	2a 95       	dec	r18
 14e:	e2 f7       	brpl	.-8      	; 0x148 <keypad_get_key+0xb4>
 150:	9c 01       	movw	r18, r24
			{
				while( !(keypadPIN & (1<<keypad_Rows[j])) );
 152:	80 b3       	in	r24, 0x10	; 16
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	82 23       	and	r24, r18
 158:	93 23       	and	r25, r19
 15a:	89 2b       	or	r24, r25
 15c:	d1 f3       	breq	.-12     	; 0x152 <keypad_get_key+0xbe>
				switch (i)
 15e:	a1 30       	cpi	r26, 0x01	; 1
 160:	b1 05       	cpc	r27, r1
 162:	c1 f0       	breq	.+48     	; 0x194 <keypad_get_key+0x100>
 164:	1c f4       	brge	.+6      	; 0x16c <keypad_get_key+0xd8>
 166:	10 97       	sbiw	r26, 0x00	; 0
 168:	41 f0       	breq	.+16     	; 0x17a <keypad_get_key+0xe6>
 16a:	3b c0       	rjmp	.+118    	; 0x1e2 <keypad_get_key+0x14e>
 16c:	a2 30       	cpi	r26, 0x02	; 2
 16e:	b1 05       	cpc	r27, r1
 170:	f1 f0       	breq	.+60     	; 0x1ae <keypad_get_key+0x11a>
 172:	a3 30       	cpi	r26, 0x03	; 3
 174:	b1 05       	cpc	r27, r1
 176:	41 f1       	breq	.+80     	; 0x1c8 <keypad_get_key+0x134>
 178:	34 c0       	rjmp	.+104    	; 0x1e2 <keypad_get_key+0x14e>
				{
				case (0) :
					{
						if (j == 0) return '7';
 17a:	01 15       	cp	r16, r1
 17c:	11 05       	cpc	r17, r1
 17e:	e1 f1       	breq	.+120    	; 0x1f8 <keypad_get_key+0x164>
						else if (j == 1) return '4';
 180:	01 30       	cpi	r16, 0x01	; 1
 182:	11 05       	cpc	r17, r1
 184:	d9 f1       	breq	.+118    	; 0x1fc <keypad_get_key+0x168>
						else if (j == 2) return '1';
 186:	02 30       	cpi	r16, 0x02	; 2
 188:	11 05       	cpc	r17, r1
 18a:	d1 f1       	breq	.+116    	; 0x200 <keypad_get_key+0x16c>
						else if (j == 3) return '?'; /* ON/OFF button */
 18c:	03 30       	cpi	r16, 0x03	; 3
 18e:	11 05       	cpc	r17, r1
 190:	41 f5       	brne	.+80     	; 0x1e2 <keypad_get_key+0x14e>
 192:	38 c0       	rjmp	.+112    	; 0x204 <keypad_get_key+0x170>
						break;
					}
				case(1):
					{
						if (j == 0) return '8';
 194:	01 15       	cp	r16, r1
 196:	11 05       	cpc	r17, r1
 198:	b9 f1       	breq	.+110    	; 0x208 <keypad_get_key+0x174>
						else if (j == 1) return '5';
 19a:	01 30       	cpi	r16, 0x01	; 1
 19c:	11 05       	cpc	r17, r1
 19e:	b1 f1       	breq	.+108    	; 0x20c <keypad_get_key+0x178>
						else if (j == 2) return '2';
 1a0:	02 30       	cpi	r16, 0x02	; 2
 1a2:	11 05       	cpc	r17, r1
 1a4:	a9 f1       	breq	.+106    	; 0x210 <keypad_get_key+0x17c>
						else if (j == 3) return '0';
 1a6:	03 30       	cpi	r16, 0x03	; 3
 1a8:	11 05       	cpc	r17, r1
 1aa:	d9 f4       	brne	.+54     	; 0x1e2 <keypad_get_key+0x14e>
 1ac:	33 c0       	rjmp	.+102    	; 0x214 <keypad_get_key+0x180>
						break;
					}
				case(2):
					{
						if (j == 0) return '9';
 1ae:	01 15       	cp	r16, r1
 1b0:	11 05       	cpc	r17, r1
 1b2:	91 f1       	breq	.+100    	; 0x218 <keypad_get_key+0x184>
						else if (j == 1) return '6';
 1b4:	01 30       	cpi	r16, 0x01	; 1
 1b6:	11 05       	cpc	r17, r1
 1b8:	89 f1       	breq	.+98     	; 0x21c <keypad_get_key+0x188>
						else if (j == 2) return '3';
 1ba:	02 30       	cpi	r16, 0x02	; 2
 1bc:	11 05       	cpc	r17, r1
 1be:	81 f1       	breq	.+96     	; 0x220 <keypad_get_key+0x18c>
						else if (j == 3) return '=';
 1c0:	03 30       	cpi	r16, 0x03	; 3
 1c2:	11 05       	cpc	r17, r1
 1c4:	71 f4       	brne	.+28     	; 0x1e2 <keypad_get_key+0x14e>
 1c6:	2e c0       	rjmp	.+92     	; 0x224 <keypad_get_key+0x190>
						break;
					}
				case(3):
					{
						if (j == 0) return '/';
 1c8:	01 15       	cp	r16, r1
 1ca:	11 05       	cpc	r17, r1
 1cc:	69 f1       	breq	.+90     	; 0x228 <keypad_get_key+0x194>
						else if (j == 1) return '*';
 1ce:	01 30       	cpi	r16, 0x01	; 1
 1d0:	11 05       	cpc	r17, r1
 1d2:	61 f1       	breq	.+88     	; 0x22c <keypad_get_key+0x198>
						else if (j == 2) return '-';
 1d4:	02 30       	cpi	r16, 0x02	; 2
 1d6:	11 05       	cpc	r17, r1
 1d8:	59 f1       	breq	.+86     	; 0x230 <keypad_get_key+0x19c>
						else if (j == 3) return '+';
 1da:	03 30       	cpi	r16, 0x03	; 3
 1dc:	11 05       	cpc	r17, r1
 1de:	61 f5       	brne	.+88     	; 0x238 <keypad_get_key+0x1a4>
 1e0:	29 c0       	rjmp	.+82     	; 0x234 <keypad_get_key+0x1a0>
	{
		keypadPORT |=  (1<<keypad_Col[0]) | (1<<keypad_Col[1]) | (1<<keypad_Col[2]) | (1<<keypad_Col[3]) ; //to make sure all columns is Vcc
		//_delay_ms(2000);
		keypadPORT &=~ (1 << keypad_Col[i]);// to send 0 to specific column
	
		for ( j=0 ; j<4 ;j++)
 1e2:	64 30       	cpi	r22, 0x04	; 4
 1e4:	71 05       	cpc	r23, r1
 1e6:	0c f4       	brge	.+2      	; 0x1ea <keypad_get_key+0x156>
 1e8:	9e cf       	rjmp	.-196    	; 0x126 <keypad_get_key+0x92>
	
}

char keypad_get_key(){
	int i,j;
	for ( i=0;i<4 ;i++)
 1ea:	11 96       	adiw	r26, 0x01	; 1
 1ec:	a4 30       	cpi	r26, 0x04	; 4
 1ee:	b1 05       	cpc	r27, r1
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <keypad_get_key+0x160>
 1f2:	61 cf       	rjmp	.-318    	; 0xb6 <keypad_get_key+0x22>
					}
				}
			}
		}	
	}
	return 'A' ;			
 1f4:	81 e4       	ldi	r24, 0x41	; 65
 1f6:	25 c0       	rjmp	.+74     	; 0x242 <keypad_get_key+0x1ae>
				while( !(keypadPIN & (1<<keypad_Rows[j])) );
				switch (i)
				{
				case (0) :
					{
						if (j == 0) return '7';
 1f8:	87 e3       	ldi	r24, 0x37	; 55
 1fa:	23 c0       	rjmp	.+70     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 1) return '4';
 1fc:	84 e3       	ldi	r24, 0x34	; 52
 1fe:	21 c0       	rjmp	.+66     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 2) return '1';
 200:	81 e3       	ldi	r24, 0x31	; 49
 202:	1f c0       	rjmp	.+62     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 3) return '?'; /* ON/OFF button */
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	1d c0       	rjmp	.+58     	; 0x242 <keypad_get_key+0x1ae>
						break;
					}
				case(1):
					{
						if (j == 0) return '8';
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	1b c0       	rjmp	.+54     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 1) return '5';
 20c:	85 e3       	ldi	r24, 0x35	; 53
 20e:	19 c0       	rjmp	.+50     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 2) return '2';
 210:	82 e3       	ldi	r24, 0x32	; 50
 212:	17 c0       	rjmp	.+46     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 3) return '0';
 214:	80 e3       	ldi	r24, 0x30	; 48
 216:	15 c0       	rjmp	.+42     	; 0x242 <keypad_get_key+0x1ae>
						break;
					}
				case(2):
					{
						if (j == 0) return '9';
 218:	89 e3       	ldi	r24, 0x39	; 57
 21a:	13 c0       	rjmp	.+38     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 1) return '6';
 21c:	86 e3       	ldi	r24, 0x36	; 54
 21e:	11 c0       	rjmp	.+34     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 2) return '3';
 220:	83 e3       	ldi	r24, 0x33	; 51
 222:	0f c0       	rjmp	.+30     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 3) return '=';
 224:	8d e3       	ldi	r24, 0x3D	; 61
 226:	0d c0       	rjmp	.+26     	; 0x242 <keypad_get_key+0x1ae>
						break;
					}
				case(3):
					{
						if (j == 0) return '/';
 228:	8f e2       	ldi	r24, 0x2F	; 47
 22a:	0b c0       	rjmp	.+22     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 1) return '*';
 22c:	8a e2       	ldi	r24, 0x2A	; 42
 22e:	09 c0       	rjmp	.+18     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 2) return '-';
 230:	8d e2       	ldi	r24, 0x2D	; 45
 232:	07 c0       	rjmp	.+14     	; 0x242 <keypad_get_key+0x1ae>
						else if (j == 3) return '+';
 234:	8b e2       	ldi	r24, 0x2B	; 43
 236:	05 c0       	rjmp	.+10     	; 0x242 <keypad_get_key+0x1ae>
	{
		keypadPORT |=  (1<<keypad_Col[0]) | (1<<keypad_Col[1]) | (1<<keypad_Col[2]) | (1<<keypad_Col[3]) ; //to make sure all columns is Vcc
		//_delay_ms(2000);
		keypadPORT &=~ (1 << keypad_Col[i]);// to send 0 to specific column
	
		for ( j=0 ; j<4 ;j++)
 238:	64 30       	cpi	r22, 0x04	; 4
 23a:	71 05       	cpc	r23, r1
 23c:	0c f4       	brge	.+2      	; 0x240 <keypad_get_key+0x1ac>
 23e:	73 cf       	rjmp	.-282    	; 0x126 <keypad_get_key+0x92>
					}
				}
			}
		}	
	}
	return 'A' ;			
 240:	81 e4       	ldi	r24, 0x41	; 65
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	08 95       	ret

00000250 <lcd_kick>:
	
	

}
void lcd_kick(void){
	lcd_control_port |= (1<<EN);
 250:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	83 ed       	ldi	r24, 0xD3	; 211
 254:	90 e3       	ldi	r25, 0x30	; 48
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_kick+0x6>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_kick+0xc>
 25c:	00 00       	nop
	_delay_ms(50);
	lcd_control_port &=~ (1<<EN);
 25e:	c3 98       	cbi	0x18, 3	; 24
 260:	08 95       	ret

00000262 <lcd_check_isbusy>:
}

void lcd_check_isbusy(){
	Dir_lcd_port &=~ (0xff<<DATA_shift);
 262:	8a b3       	in	r24, 0x1a	; 26
 264:	1a ba       	out	0x1a, r1	; 26
	lcd_control_port &=~ (1<<RS);
 266:	c1 98       	cbi	0x18, 1	; 24
	lcd_control_port |= (1<<RW); //to read
 268:	c2 9a       	sbi	0x18, 2	; 24
	lcd_kick();
 26a:	0e 94 28 01 	call	0x250	; 0x250 <lcd_kick>
	lcd_control_port &=~ (1<<RW);
 26e:	c2 98       	cbi	0x18, 2	; 24
	Dir_lcd_port |= (0xff<<DATA_shift);
 270:	8a b3       	in	r24, 0x1a	; 26
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	8a bb       	out	0x1a, r24	; 26
 276:	08 95       	ret

00000278 <lcd_send_command>:
}




void lcd_send_command(unsigned char command){
 278:	cf 93       	push	r28
 27a:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	lcd_check_isbusy();
 27c:	0e 94 31 01 	call	0x262	; 0x262 <lcd_check_isbusy>
	lcd_port = command;
 280:	cb bb       	out	0x1b, r28	; 27
	lcd_control_port &= ~( (1<<RS) | (1<<RW) | (1<<EN) );
 282:	88 b3       	in	r24, 0x18	; 24
 284:	81 7f       	andi	r24, 0xF1	; 241
 286:	88 bb       	out	0x18, r24	; 24
	lcd_kick();
 288:	0e 94 28 01 	call	0x250	; 0x250 <lcd_kick>

	//#ifdef FOUR_BIT_MODE
	//#endif
	
	
}
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <lcd_send_character>:

void lcd_send_character(unsigned char character){
 290:	cf 93       	push	r28
 292:	c8 2f       	mov	r28, r24
	
	#ifdef EIGHT_BIT_MODE
	lcd_check_isbusy();
 294:	0e 94 31 01 	call	0x262	; 0x262 <lcd_check_isbusy>
	lcd_control_port |= (1<<RS);
 298:	c1 9a       	sbi	0x18, 1	; 24
	lcd_control_port &=~ (1<<RW);
 29a:	c2 98       	cbi	0x18, 2	; 24
	lcd_port = character;
 29c:	cb bb       	out	0x1b, r28	; 27
	lcd_kick();
 29e:	0e 94 28 01 	call	0x250	; 0x250 <lcd_kick>
	#endif
	
	#ifdef FOUR_BIT_MODE
	#endif
}
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <lcd_send_string>:

void lcd_send_string(unsigned char* string){
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	d8 2f       	mov	r29, r24
 2b0:	c9 2f       	mov	r28, r25
	
	#ifdef EIGHT_BIT_MODE
	lcd_check_isbusy();
 2b2:	0e 94 31 01 	call	0x262	; 0x262 <lcd_check_isbusy>
	lcd_control_port |= (1<<RS);
 2b6:	c1 9a       	sbi	0x18, 1	; 24
	lcd_control_port &=~( (1<<RW) | (1<<EN) );
 2b8:	88 b3       	in	r24, 0x18	; 24
 2ba:	83 7f       	andi	r24, 0xF3	; 243
 2bc:	88 bb       	out	0x18, r24	; 24
 2be:	0d 2f       	mov	r16, r29
 2c0:	1c 2f       	mov	r17, r28
	
	int i=0; // to tell how much the display fills
 2c2:	c0 e0       	ldi	r28, 0x00	; 0
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(*string > 0){
 2c6:	12 c0       	rjmp	.+36     	; 0x2ec <lcd_send_string+0x46>
		lcd_send_character(*string++);
 2c8:	0e 94 48 01 	call	0x290	; 0x290 <lcd_send_character>
		i++;
 2cc:	21 96       	adiw	r28, 0x01	; 1
		if(i == 16)
 2ce:	c0 31       	cpi	r28, 0x10	; 16
 2d0:	d1 05       	cpc	r29, r1
 2d2:	21 f4       	brne	.+8      	; 0x2dc <lcd_send_string+0x36>
		lcd_send_command(LCD_BEGIN_AT_FIRST_ROW + position);
	}
	if (line == 2)
	{
		if(position >= 0 && position < 16)
		lcd_send_command(LCD_BEGIN_AT_SECOND_ROW + position);
 2d4:	80 ec       	ldi	r24, 0xC0	; 192
 2d6:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_send_command>
 2da:	08 c0       	rjmp	.+16     	; 0x2ec <lcd_send_string+0x46>
	while(*string > 0){
		lcd_send_character(*string++);
		i++;
		if(i == 16)
		lcd_set_cursor(2,0);
		if (i == 32)
 2dc:	c0 32       	cpi	r28, 0x20	; 32
 2de:	d1 05       	cpc	r29, r1
 2e0:	29 f4       	brne	.+10     	; 0x2ec <lcd_send_string+0x46>

void lcd_set_cursor(unsigned char line , unsigned char position ){
	if (line == 1)
	{
		if(position >= 0 && position < 16)
		lcd_send_command(LCD_BEGIN_AT_FIRST_ROW + position);
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_send_command>
		if(i == 16)
		lcd_set_cursor(2,0);
		if (i == 32)
		{
			lcd_set_cursor(1,0);
			i=0;
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
	lcd_control_port |= (1<<RS);
	lcd_control_port &=~( (1<<RW) | (1<<EN) );
	
	int i=0; // to tell how much the display fills
	
	while(*string > 0){
 2ec:	f8 01       	movw	r30, r16
 2ee:	81 91       	ld	r24, Z+
 2f0:	8f 01       	movw	r16, r30
 2f2:	81 11       	cpse	r24, r1
 2f4:	e9 cf       	rjmp	.-46     	; 0x2c8 <lcd_send_string+0x22>
	#endif
	
	#ifdef FOUR_BIT_MODE
	#endif
	
}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

00000300 <lcd_Clear_Screen>:


void lcd_Clear_Screen(){
	lcd_send_command(LCD_CLEAR_SCREEN);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_send_command>
 306:	08 95       	ret

00000308 <lcd_init>:
 308:	87 e8       	ldi	r24, 0x87	; 135
 30a:	93 e1       	ldi	r25, 0x13	; 19
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <lcd_init+0x4>
 310:	00 c0       	rjmp	.+0      	; 0x312 <lcd_init+0xa>
 312:	00 00       	nop
#include "LCD.h"


void lcd_init(){
	_delay_ms(20);
	Dir_lcd_port = 0xFF;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	8a bb       	out	0x1a, r24	; 26
	Dir_lcd_control_port |= ( (1<<RS) | (1<<RW) | (1<<EN) );
 318:	87 b3       	in	r24, 0x17	; 23
 31a:	8e 60       	ori	r24, 0x0E	; 14
 31c:	87 bb       	out	0x17, r24	; 23
	lcd_control_port &= ~( (1<<RS) | (1<<RW) | (1<<EN) );
 31e:	88 b3       	in	r24, 0x18	; 24
 320:	81 7f       	andi	r24, 0xF1	; 241
 322:	88 bb       	out	0x18, r24	; 24
 324:	85 ea       	ldi	r24, 0xA5	; 165
 326:	9e e0       	ldi	r25, 0x0E	; 14
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <lcd_init+0x20>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <lcd_init+0x26>
 32e:	00 00       	nop
	_delay_ms(15); //finish initialization
	lcd_Clear_Screen();
 330:	0e 94 80 01 	call	0x300	; 0x300 <lcd_Clear_Screen>
	

	#ifdef EIGHT_BIT_MODE
	lcd_send_command(LCD_FUNCTION_8BIT_2LINES);
 334:	88 e3       	ldi	r24, 0x38	; 56
 336:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_send_command>
	#endif
	
	#ifdef FOUR_BIT_MODE
	#endif
	
	lcd_send_command(LCD_ENTRY_MODE);
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_send_command>
	lcd_send_command(LCD_BEGIN_AT_FIRST_ROW);
 340:	80 e8       	ldi	r24, 0x80	; 128
 342:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_send_command>
	lcd_send_command(LCD_DISP_ON_CURSOR_BLINK);
 346:	8f e0       	ldi	r24, 0x0F	; 15
 348:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_send_command>
 34c:	08 95       	ret

0000034e <lcd_set_cursor>:
void lcd_Clear_Screen(){
	lcd_send_command(LCD_CLEAR_SCREEN);
}

void lcd_set_cursor(unsigned char line , unsigned char position ){
	if (line == 1)
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	39 f4       	brne	.+14     	; 0x360 <lcd_set_cursor+0x12>
	{
		if(position >= 0 && position < 16)
 352:	60 31       	cpi	r22, 0x10	; 16
 354:	68 f4       	brcc	.+26     	; 0x370 <lcd_set_cursor+0x22>
		lcd_send_command(LCD_BEGIN_AT_FIRST_ROW + position);
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	86 0f       	add	r24, r22
 35a:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_send_command>
 35e:	08 95       	ret
	}
	if (line == 2)
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	31 f4       	brne	.+12     	; 0x370 <lcd_set_cursor+0x22>
	{
		if(position >= 0 && position < 16)
 364:	60 31       	cpi	r22, 0x10	; 16
 366:	20 f4       	brcc	.+8      	; 0x370 <lcd_set_cursor+0x22>
		lcd_send_command(LCD_BEGIN_AT_SECOND_ROW + position);
 368:	80 ec       	ldi	r24, 0xC0	; 192
 36a:	86 0f       	add	r24, r22
 36c:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_send_command>
 370:	08 95       	ret

00000372 <main>:
#include "LCD.h"
#include "Keypad.h"

int main(void)
{
lcd_init();
 372:	0e 94 84 01 	call	0x308	; 0x308 <lcd_init>
keypad_init();
 376:	0e 94 41 00 	call	0x82	; 0x82 <keypad_init>
int i =0;
 37a:	c0 e0       	ldi	r28, 0x00	; 0
 37c:	d0 e0       	ldi	r29, 0x00	; 0
while (1)
{
	char pressed_key = keypad_get_key();
 37e:	0e 94 4a 00 	call	0x94	; 0x94 <keypad_get_key>

	switch(pressed_key)
 382:	8f 33       	cpi	r24, 0x3F	; 63
 384:	19 f0       	breq	.+6      	; 0x38c <main+0x1a>
 386:	81 34       	cpi	r24, 0x41	; 65
 388:	d1 f3       	breq	.-12     	; 0x37e <main+0xc>
 38a:	14 c0       	rjmp	.+40     	; 0x3b4 <main+0x42>
	{
		case ('?'):
		{
			lcd_set_cursor(2,0);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_set_cursor>
			lcd_send_string("Invalid value");
 394:	88 e6       	ldi	r24, 0x68	; 104
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_send_string>
 39c:	2f eb       	ldi	r18, 0xBF	; 191
 39e:	84 ed       	ldi	r24, 0xD4	; 212
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	80 40       	sbci	r24, 0x00	; 0
 3a6:	90 40       	sbci	r25, 0x00	; 0
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x30>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <main+0x3a>
 3ac:	00 00       	nop
			_delay_ms(600);
			lcd_Clear_Screen();
 3ae:	0e 94 80 01 	call	0x300	; 0x300 <lcd_Clear_Screen>
			break;
 3b2:	e5 cf       	rjmp	.-54     	; 0x37e <main+0xc>
		
		case ('A'):
		break;
		
		default: {
					lcd_send_character(pressed_key);
 3b4:	0e 94 48 01 	call	0x290	; 0x290 <lcd_send_character>
					if (i==16)
 3b8:	c0 31       	cpi	r28, 0x10	; 16
 3ba:	d1 05       	cpc	r29, r1
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <main+0x54>
					{
						lcd_set_cursor(2,0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_set_cursor>
					}
					i++;
 3c6:	21 96       	adiw	r28, 0x01	; 1
 3c8:	da cf       	rjmp	.-76     	; 0x37e <main+0xc>

000003ca <_exit>:
 3ca:	f8 94       	cli

000003cc <__stop_program>:
 3cc:	ff cf       	rjmp	.-2      	; 0x3cc <__stop_program>
