
Lab 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000546  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f2  00000000  00000000  000006c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000196  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000280  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Utils.h"

int main(void)
{
	int flag=0;
	ResetBit(DDRD,0);
  6c:	88 98       	cbi	0x11, 0	; 17
	SetBit(DDRD,7);
  6e:	8f 9a       	sbi	0x11, 7	; 17
	ResetBit(PORTD,0);
  70:	90 98       	cbi	0x12, 0	; 18

	ResetBit(PORTD,0);
  72:	90 98       	cbi	0x12, 0	; 18
#include "MemMap.h"
#include "Utils.h"

int main(void)
{
	int flag=0;
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
				flag++;
			}
			
		}
		else
		flag=0;
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	20 e0       	ldi	r18, 0x00	; 0
    {
		if(ReadBit(PIND,0) == 1 ){
			if (flag == 0)
			{
				ToggleBit(PORTD,7);
				flag++;
  7c:	51 e0       	ldi	r21, 0x01	; 1
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	02 c0       	rjmp	.+4      	; 0x86 <main+0x1a>
			}
			
		}
		else
		flag=0;
  82:	83 2f       	mov	r24, r19
  84:	92 2f       	mov	r25, r18

	ResetBit(PORTD,0);
    /* Replace with your application code */
    while (1) 
    {
		if(ReadBit(PIND,0) == 1 ){
  86:	80 9b       	sbis	0x10, 0	; 16
  88:	fc cf       	rjmp	.-8      	; 0x82 <main+0x16>
			if (flag == 0)
  8a:	00 97       	sbiw	r24, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x1a>
			{
				ToggleBit(PORTD,7);
  8e:	82 b3       	in	r24, 0x12	; 18
  90:	80 58       	subi	r24, 0x80	; 128
  92:	82 bb       	out	0x12, r24	; 18
				flag++;
  94:	85 2f       	mov	r24, r21
  96:	94 2f       	mov	r25, r20
  98:	f6 cf       	rjmp	.-20     	; 0x86 <main+0x1a>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
